buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven { url "http://repo.spring.io/plugins-release" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
  }
}


plugins {
  id "org.sonarqube" version "2.6.2"
  id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.moowork.node'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

group = 'org.sitmun'
if (project.hasProperty("customVersion")) {
  version = project.customVersion
} else {
  version = "${sitmun_version}"
}

repositories {
  mavenLocal()
  mavenCentral()
}

bootRepackage {
  enabled = false
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-data-rest"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.security:spring-security-data"

  implementation "io.springfox:springfox-swagger2:${springfox_swagger_version}"

  implementation "org.webjars:webjars-locator"
  implementation "org.webjars:bootstrap:${bootstrap_version}"
  implementation "org.webjars:requirejs:${requirejs_version}"

  implementation "io.jsonwebtoken:jjwt:${jjwt_version}"

  testImplementation "com.h2database:h2"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "org.assertj:assertj-core:${assertj_core_version}"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId group
      artifactId 'sitmun-plugin-core'
      version version

      from components.java
    }
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.organization', 'sitmun'
  }
}

node {
  version = "${node_version}"
  npmVersion = "${npm_version}"
  yarnVersion = "${yarn_version}"
  if (project.hasProperty("downloadNode")) {
    download = project.properties.downloadNode
  } else {
    download = "${node_download}"
  }
}


task prepareNode {
  description = 'Prepare the NPM environment.'
  def taskDir = file("node_modules")
  outputs.dir taskDir
  enabled = !taskDir.exists()
  doLast {
    def nodeDownload = project.hasProperty("downloadNode") ? project.properties.downloadNode : "${node_download}"
    if (nodeDownload) {
      def rebuild = tasks.create(name: "npmRebuild", type: NpmTask)
      rebuild.args = ['rebuild', 'node-sass']
      rebuild.execute()
    }
    def install = tasks.create(name: "npmInstallToo", type: NpmTask)
    install.args = ['install']
    install.execute()
  }
}

task npmBuildAngularHal(type: NpmTask, dependsOn: prepareNode) {
  description = 'Build module angular-hal.'
  args = ['run-script', 'build-angular-hal']
}

task npmBuildSitmunPluginCore(type: NpmTask, dependsOn: npmBuildAngularHal) {
  description = 'Build module sitmun-plugin-core.'
  args = ['run-script', 'build-sitmun-plugin-core']
}

task installModules(dependsOn: npmBuildSitmunPluginCore)

processResources.dependsOn(installModules)

task install(dependsOn: 'publishToMavenLocal')

clean {
  delete "node_modules"
  delete "dist"
}