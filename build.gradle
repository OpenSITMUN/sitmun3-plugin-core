plugins {
  id "org.springframework.boot" version "1.5.8.RELEASE"
  id "org.sonarqube" version "2.6.2"
  id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
def targetJavaVersion = JavaVersion.VERSION_1_8;
sourceCompatibility = "${targetJavaVersion}"
targetCompatibility = "${targetJavaVersion}"

apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.moowork.node'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

group = 'org.sitmun'
if (project.hasProperty("customVersion")) {
  version = project.customVersion
} else {
  version = "${sitmun_version}"
}

repositories {
  mavenLocal()
  mavenCentral()
}

bootRepackage {
  enabled = false
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-data-rest"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.security:spring-security-data"

  implementation "io.springfox:springfox-swagger2:${springfox_swagger_version}"

  implementation "org.webjars:webjars-locator"
  implementation "org.webjars:bootstrap:${bootstrap_version}"
  implementation "org.webjars:requirejs:${requirejs_version}"
  implementation "info.picocli:picocli:${picocli_version}"

  implementation "io.jsonwebtoken:jjwt:${jjwt_version}"

  testImplementation "com.h2database:h2"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "org.assertj:assertj-core:${assertj_core_version}"
}

task checkJavaVersion {
    if (!JavaVersion.current().equals(targetJavaVersion)) {
        String message = """
ERROR: Java ${targetJavaVersion} JDK required but ${JavaVersion.current()} found. 
SOLUTION: 
  a) Point JAVA_HOME to a ${targetJavaVersion} JDK and then run gradle, or
  b) Run ./gradlew -Dorg.gradle.java.home=/path_to_jdk_${targetJavaVersion}_directory"""
        throw new GradleException(message)
    }
}

compileJava.dependsOn checkJavaVersion

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId group
      artifactId 'sitmun-plugin-core'
      version version

      from components.java
    }
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.organization', 'sitmun'
  }
}

def cacheDir = project.hasProperty("cacheDir")? project.properties.cacheDir : "${project.buildDir}" 

task npmBuildAngularHal(type: NpmTask, dependsOn: npmInstall) {
  description = 'Build module angular-hal.'
  args = ['run-script', 'build-angular-hal']
}

task npmBuildSitmunPluginCore(type: NpmTask, dependsOn: npmBuildAngularHal) {
  description = 'Build module sitmun-plugin-core.'
  args = ['run-script', 'build-sitmun-plugin-core']
}

task installModules(dependsOn: npmBuildSitmunPluginCore)


// processResources.dependsOn installModules

task install(dependsOn: 'publishToMavenLocal')


task oracle8iSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle8iDialect', '-f', 'src/main/sql/oracle8i.sql'
}

task oracle9iSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle9iDialect', '-f', 'src/main/sql/oracle9i.sql'
}


task postgreSQLSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.PostgreSQLDialect', '-f', 'src/main/sql/postgresql.sql'
}

task h2SchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.H2Dialect', '-f', 'src/main/sql/h2.sql'
}

task exportSchemas(dependsOn: [oracle8iSchemaExport, oracle9iSchemaExport, postgreSQLSchemaExport, h2SchemaExport])

clean {
  delete "node_modules"
  delete "dist"
  delete "${cacheDir}"
}
